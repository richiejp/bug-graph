* Synopsis
  This is an experimental project to analyse test results and automatically
  connect them with existing bug reports.

  This is the second version, the first was basically a MongoDB script and
  worked reasonably well so long as it was me using it. However it was far too
  easy to get working and I decided I needed 400% more unstable technologies,
  so here is the Actix-IndraDB-WASM-Yew, all Rust, version.
* Building & Installing
** Prerequisites
  There is no crate, so you will have to clone and compile. You will at least
  need `cargo-web`, Rust nightly and `wasm32-unknown-unknown`. Also see the
  Cargo.toml, you will need to clone some repos and maybe override the patch
  section.
* Project organisation
** Current state
   Presently the entire project is in a prototype phase where the objective is
   to build an end-to-end solution as fast as possible which tests the
   following hypotheses.

   If the hypotheses are proven correct then it will enter a cleanup and
   refactoring phase where the only goal will be long term
   maintainability. After which new modules will be added with there own
   phases or some other approach will be taken.
** Hypotheses [2/7]
   These hypotheses are for the current system design, which is an Indradb
   graph database (and simple key-value map for indexing or whatever) and some
   Rust web framework. The database can be in-memory or with rocksdb if
   necessary.
*** DONE Can use Actix actors for the main components
    It should be easy to represent things like the database/repo as an Actor
*** DONE Can use Actix to create an Erlang style application
**** Hypotheses
    Individual actors should be able to be killed at random and the
    application can recover.
**** Result
     actix-web proves this itself, as when a web worker panics it is restarted
     automatically. However I have not figured out how to do this with normal
     actors yet. I know how to catch a panic, but I am not sure if it really
     makes sense to do this or where to do it. So I am not sure how close one
     can get to Erlang. It is probably best to avoid panics unlike in
     Erlang. However I am satisfied that it can be done to a reasonable level.
*** TODO Can display a comparative matrix view of test results
    It should be reasonably easy to query a graph database to produce a table
    view of test results for one or more tests. The main reason being to
    compare the results of a test in different environments.
*** TODO Can be used to identify which bug causes a test failure
    Bug-graph simply needs to suggest the correct bugs for the test results
    most of the time if the user previously identified a connection. The user
    can confirm which connections are correct.
*** TODO A report can be created showing the bugs connected with test failures
    Simply needs to be a markdown document listing test failure-bug pairs for
    one or more product revisions.
*** TODO Several months of LTP results can be stored for multiple products
    Stored and queried.
** Tasks [1/2]
   Similar to hypotheses, but they can be added and removed without having to
   consider if removing one is a sign of project failure.
*** DONE Use websockets to send a list of tests and display them in yew
    Managed to communicate with web sockets and created Repo message to get a
    list. Now need to:
**** DONE Serialise list as JSON on server and send it
**** DONE Deserialise JSON on client and display it
*** TODO Show a test's adjacent vertices when it is clicked on
